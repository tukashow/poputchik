import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

MY_BOT_TOKEN = os.getenv('MY_BOT_TOKEN')

bot = Bot(token=MY_BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    role = State()
    from_city = State()
    to_city = State()
    date = State()
    price = State()
    priority = State()

role_kb = ReplyKeyboardMarkup(resize_keyboard=True)
role_kb.add(KeyboardButton("–ñ“Ø—Ä–≥“Ø–∑“Ø“Ø—á“Ø"), KeyboardButton("–ñ–æ–ª–æ–æ—É—á—É"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã! –°–∏–∑ –∫–∏–º—Å–∏–∑?", reply_markup=role_kb)
    await Form.role.set()

@dp.message_handler(state=Form.role)
async def set_role(message: types.Message, state: FSMContext):
    await state.update_data(role=message.text)
    await message.answer("–ö–∞–π—Å—ã —à–∞–∞—Ä–¥–∞–Ω —á—ã–≥–∞—Å—ã–∑?")
    await Form.next()

@dp.message_handler(state=Form.from_city)
async def set_from(message: types.Message, state: FSMContext):
    await state.update_data(from_city=message.text)
    await message.answer("–ö–∞–π—Å—ã —à–∞–∞—Ä–≥–∞ –±–∞—Ä–∞—Å—ã–∑?")
    await Form.next()

@dp.message_handler(state=Form.to_city)
async def set_to(message: types.Message, state: FSMContext):
    await state.update_data(to_city=message.text)
    await message.answer("–ö–∞—á–∞–Ω –∂–æ–ª–≥–æ —á—ã–≥–∞—Å—ã–∑? (–º–∏—Å–∞–ª—ã: 3-–∏—é–Ω—å, —Å–∞–∞—Ç 10:00)")
    await Form.next()

@dp.message_handler(state=Form.date)
async def set_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer('–ë–∞–∞—Å—ã –∫–∞–Ω—á–∞? (–∂–µ "–∂–æ–∫")')
    await Form.next()

@dp.message_handler(state=Form.price)
async def set_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    priority_kb = InlineKeyboardMarkup()
    priority_kb.add(
        InlineKeyboardButton("–ë–µ–∫–µ—Ä –∂–∞—Ä—ã—è", callback_data="free"),
        InlineKeyboardButton("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—Ç“Ø“Ø –∂–∞—Ä—ã—è (—Ç”©–ª”©–º) üí∞", callback_data="paid")
    )
    await message.answer("–ñ–∞—Ä—ã—è–Ω—ã–Ω —Ç“Ø—Ä“Ø–Ω —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=priority_kb)
    await Form.next()

@dp.callback_query_handler(lambda c: c.data in ['free', 'paid'], state=Form.priority)
async def set_priority(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    priority = call.data
    await call.message.delete()

    text = (f"üöò {data['role']} –∏–∑ {data['from_city']} –≤ {data['to_city']}\n"
            f"üìÖ {data['date']}\n"
            f"üí∏ {data['price']}\n"
            f"üë§ {call.from_user.mention}")

    if priority == 'paid':
        text = "üí∞ *–ü–†–ò–û–†–ò–¢–ï–¢–¢“Æ“Æ –ñ–ê–†–´–Ø!*\n" + text
        await call.message.answer("–ê–¥–º–∏–Ω –º–µ–Ω–µ–Ω –±–∞–π–ª–∞–Ω—ã—à—ã–ø, —Ç”©–ª”©–º –∂–∞—Å–∞“£—ã–∑: @admin_username")

    await bot.send_message(chat_id='@poputchik_kyrgyzstan', text=text, parse_mode="Markdown")
    await call.message.answer("–ñ–∞—Ä—ã—è –∂”©–Ω”©—Ç“Ø–ª–¥“Ø. –†–∞—Ö–º–∞—Ç! ‚úÖ")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
